openapi: "3.0.0"
info:
  description: "This is the bricky API ."
  version: "1.0.0"
  title: "Bricky Swagger"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
  - name: "partList"
    description: "Everything about your part lists"
  - name: "blueprint"
    description: "Everything about blueprints, aka Mocs and Sets"
  - name: "newsBlog"
    description: "Everything about newsBlog"
  - name: "account"
    description: "Operations about user accounts"
schemes:
  - "https"
  - "http"
paths:
  /partList:
    put:
      tags:
        - "partList"
      summary: "Update an existing part list"
      description: ""
      operationId: "updatePet"
      parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/components/schemas/Pet"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/findByStatus:
    get:
      tags:
        - "partList"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/Pet"
        400:
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/findByTags:
    get:
      tags:
        - "partList"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/Pet"
        400:
          description: "Invalid tag value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
        - "partList"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
        - api_key: []
    post:
      tags:
        - "partList"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the pet"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - "partList"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "petId"
          in: "path"
          description: "Pet id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
        - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/ApiResponse"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /store/inventory:
    get:
      tags:
        - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
        - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the pet"
          required: true
          schema:
            $ref: "#/components/schemas/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
        - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
        - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /account/login:
    post:
      tags:
        - "account"
      summary: "Authorize user account"
      description: "Authenticate with Rebrickable"
      requestBody:
        $ref: '#/components/requestBodies/LoginCredentials'
      responses:
        200:
          description: "Ok, JWT Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
          headers:
            X-Rate-Limit:
              schema:
                type: integer
              description: "calls per hour allowed by the user"
            X-Expires-After:
              schema:
                type: integer
              description: "date in UTC when token expires"
        401:
          description: "Invalid username/password supplied"
  /account/logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - "account"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      parameters: []
      responses:
        200:
          description: "successful operation"
  /account/{username}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "account"
      summary: "Get account info for logged in user"
      description: ""
      operationId: "getAccountByUsername"
      parameters:
        - name: "username"
          in: "path"
          schema:
            type: "string"
          description: "The username of the account you want info of"
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "account"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
        - name: "username"
          in: path
          schema:
            type: string
          description: "The username of the account that needs to be deleted (can only be own)"
          required: true
      responses:
        200:
          description: "User successfully deleted"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
components:
  requestBodies:
    LoginCredentials:
      description: "Login Credentials"
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginScheme'
          example:
            username: "Dönermann"
            password: "Kebab"
            privacy-policy-accepted: true
  schemas:
    LoginScheme:
      type: object
      required:
        - username
        - password
        - privacy-policy-accepted
      properties:
        username:
          type: string
          description: "The username on rebrickable"
        password:
          type: string
          description: "The password on rebrickable"
        privacy-policy-accepted:
          type: boolean
          description: "Privacy Poliy needs to be accepted on login"
    Account:
      type: object
      properties:
        username:
          type: string
    AuthenticationResponse:
      type: object
      properties:
        app_token:
          type: "string"
          example: "32okdwkdwkoa2"
        account_info:
          $ref: '#/components/schemas/Account'
    Part:
      type: "object"
      properties:
        partNumber:
          type: integer
          format: int32
        partId:
          type: string
        name:
          type: string
        print:
          type: string
        category:
          type: string
        imgUrl:
          type: string
        color:
          type: string
    PartList:
      type: object
      properties:
        listId:
          type: integer
          format: int64
        name:
          type: string
        blueprint:
          $ref: '#/components/schemas/Blueprint'
    BlueprintType:
      type: string
      enum:
        - MOC
        - SET
    Blueprint:
      type: object
      properties:
        blueprintId:
          type: integer
          format: int64
        theme:
          type: string
        name:
          type: string
        author:
          type: string
        imgUrl:
          type: string
        type:
          $ref: '#/components/schemas/BlueprintType'
    NewsBlog:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
        author:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
