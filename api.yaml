openapi: "3.0.0"
info:
  description: "This is the bricky API ."
  version: "1.0.0"
  title: "Bricky Swagger"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "private"
tags:
  - name: "part-list"
    description: "Everything about your part lists"
  - name: "blueprint"
    description: "Everything about blueprints, aka Mocs and Sets"
  - name: "news-blog"
    description: "Everything about newsBlog"
  - name: "account"
    description: "Operations about accounts"
paths:

  /part-list:
    get:
      tags:
        - "part-list"
      parameters: 
        - $ref: "#/components/parameters/updateParam"
          
      summary: "Receive all PartLists without blueprint of a user only with id and name"
      description: "Receive all PartLists without blueprint of a user only with id and name"
      security: 
       - bearerAuth: []
      responses:
        200:
          description: "OK, PartLists successfully returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartListsResponse'

  /part-list/{id}:
    get:
      parameters:
        - in: path
          name: id
          description: Id of the partList
          required: true
          schema:
            type: string
            example: "fdjkasdju56g4635r"
        - $ref: "#/components/parameters/updateParam"
      security:
        - bearerAuth: []
      tags:
        - "part-list"
      summary: "Receive Partlist with given Id"
      description: "Receive Partlist with given Id"
      responses:
        200:
          description: "OK, PartList successfully returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartList'
        404:
          description: "Partlist not found"
  /part-list/{id}/parts:
    get:
      parameters:
        - in: path
          name: id
          description: Id of the partList
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/updateParam"
      security: 
       - bearerAuth: []
      tags:
        - "part-list"
      summary: "Receive Parts of the Partlist with given Id"
      description: "Receive Parts of the Partlist with given Id"
      responses:
        200:
          description: "OK, Parts successfully returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Part'
        404:
          description: "Partlist not found"
  /blueprint/saved:
    get:
      security:
        - bearerAuth: []
      tags:
        - "blueprint"
      summary: "Get all wanted/liked blueprints by the logged in user"
      description: ""
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blueprint"
  /blueprint/saved/{blueprintId}:
    put:
      security: 
       - bearerAuth: []
      tags: 
       - "blueprint"
      summary: "Add blueprint to list of wanted/liked blueprints"
      description: ""
      parameters: 
       - name: "blueprintId"
         in: "path"
         schema:
           type: string
           example: "h57d4ng5f34h"
         description: "The id of the blueprint"
         required: true
      responses:
        200:
          description: "successful operation"
        404:
          description: "Blueprint not found"
    delete:
      security: 
       - bearerAuth: []
      tags: 
       - "blueprint"
      summary: "Remove blueprint from list of wanted/liked blueprints"
      description: ""
      parameters: 
       - name: "blueprintId"
         in: "path"
         schema:
           type: string
           example: "h57d4ng5f34h"
         description: "The id of the blueprint"
         required: true
      responses:
        200:
          description: "successful operation"
        404:
          description: "Blueprint not found"
  /blueprint/owned:
    get:
      security:
        - bearerAuth: []
      tags:
        - "blueprint"
      summary: "Get all owned blueprints by the logged in user"
      description: ""
      parameters: 
        - $ref: "#/components/parameters/updateParam"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blueprint"
        404:
          description: "Blueprint not found"
  /blueprint/owned/{blueprintId}:
    put:
      security: 
       - bearerAuth: []
      tags: 
       - "blueprint"
      summary: "Add blueprint to list of owned blueprints or edit use for build status"
      description: ""
      parameters: 
       - name: "blueprintId"
         in: "path"
         schema:
           type: string
           example: "h57d4ng5f34h"
         description: "The id of the blueprint"
         required: true
      requestBody:
        description: "allow part usage in construction"
        content:
          application/json:
            schema:
              type: object
              properties:
                useForBuilding:
                  type: boolean
      responses:
        200:
          description: "successful operation"
        404:
          description: "Blueprint not found"
    delete:
      security: 
       - bearerAuth: []
      tags: 
       - "blueprint"
      summary: "Remove blueprint from list of owned blueprints"
      description: ""
      parameters: 
       - name: "blueprintId"
         in: "path"
         schema:
           type: string
           example: "h57d4ng5f34h"
         description: "The id of the blueprint"
         required: true
      responses:
        200:
          description: "successful operation"
        404:
          description: "Blueprint not found"        
  /blueprint/{blueprintId}:
    get:
      tags:
        - "blueprint"
      summary: "Get details of blueprint by Id"
      description: ""
      parameters:
        - name: "blueprintId"
          in: "path"
          schema:
            type: string
            example: "h57d4ng5f34h"
          description: "The id of the blueprint"
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithPartList"
        404:
          description: "Blueprint not found"
  /account/login:
    post:
      tags:
        - "account"
      summary: "Authorize user account"
      description: "Authenticate with Rebrickable"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginScheme"
      responses:
        200:
          description: "Ok, JWT Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
          headers:
            X-Rate-Limit:
              schema:
                type: integer
              description: "calls per hour allowed by the user"
            X-Expires-After:
              schema:
                type: integer
              description: "date in UTC when token expires"
        401:
          description: "Invalid username/password supplied"
  /account/logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - "account"
      summary: "Logs out current logged in user session"
      description: ""
      responses:
        200:
          description: "successful operation"
  /account:
    delete:
      security:
        - bearerAuth: []
      tags:
        - "account"
      summary: "Delete user from bricky database"
      description: "This can only be done by the logged in user."
      responses:
        200:
          description: "User successfully deleted"
        404:
          description: "User not found"
  /news-blog:
    post:
      tags: 
        - "news-blog"
      summary: "Add new newsblog to list of available blogs"
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsBlog'
      responses:
        200:
          description: "Newsblog successfully added"
        400:
          description: "Incomplete information provided"
  /news-blog/available:
    get:
      tags:
        - "news-blog"
      summary: "Get list of available news blogs"
      description: ""
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsBlogList'
  /news-blog/subscribed:
    get:
      tags:
        - "news-blog"
      summary: "Get list of subscribed news blogs"
      description: ""
      security:
        - bearerAuth: []
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsBlogList'
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

  /news-blog/subscribed/{blogId}:
    put:
      tags:
        - "news-blog"
      summary: "put given Blog to list of subscribed news blogs"
      description: ""
      parameters:
        - name: "blogId"
          in: "path"
          schema:
            type: string
          description: "The id of the news blog you want to subscribe"
          required: true
          example: "j√∂shg5fg3d4f"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Subscription successfully added"
        404:
          description: "User or NewsBlog not found"
    delete:
      tags:
        - "news-blog"
      summary: "delete given Blog from list of subscribed news blogs"
      description: ""
      parameters:
        - name: "blogId"
          in: "path"
          schema:
            type: string
          description: "The id of the news blog you want to unsubscribe"
          required: true
          example: "j√∂shg5fg3d4f"
      security: 
       - bearerAuth: []
      responses:
        200:
          description: "Subscription successfully deleted"
        404:
          description: "User or NewsBlog not found"
components:
  parameters:
    updateParam:
      in: query
      name: update
      description: specifies if data should be updated from rebrickable
      required: false
      schema:
        type: boolean
        example: true
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  schemas:
    AuthenticationResponse:
      type: object
      properties:
        appToken:
          type: string
          example: "klsad√∂jfdsajf√∂ajudsdsf"
        accountInfo:
          $ref: '#/components/schemas/Account'
    LoginScheme:
      type: object
      properties:
        username:
          type: string
          example: "D√∂nermann"
        password:
          type: string
          example: "Kebab"

    PartListsResponse:
      type: array
      items:
        $ref: '#/components/schemas/ShortPartList'
    Account:
      type: "object"
      properties:
        username:
          type: string
          example: "D√∂nermann"
    Part:
      type: "object"
      properties:
        partNumber:
          type: "integer"
          format: "int32"
        partId:
          type: string
        name:
          type: string
        print:
          type: string
        category:
          type: string
        imgUrl:
          type: string
        color:
          type: string
      example:
        partNumber: 123
        partId: "1x2 Block"
        name: "1x2 Block"
        print: "blue123"
        category: "Kebab"
        imgUrl: "http://image.de"
        color: "red"
    PartList:
      type: "object"
      properties:
        listId:
          type: "integer"
          format: "int64"
          example: 12
        name:
          type: string
          example: "My List"
        useForBuild:
          type: boolean
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
    ShortPartList:
      type: "object"
      properties:
        listId:
          type: "integer"
          format: "int64"
          example: 12
        name:
          type: string
          example: "My List"
        useForBuild:
          type: boolean
    BlueprintType:
      type: string
      enum:
        - MOC
        - SET
      example: MOC
    Blueprint:
      type: "object"
      properties:
        blueprintId:
          type: "integer"
          format: "int64"
          example: 2
        theme:
          type: string
          example: "Creator"
        name:
          type: string
          example: "Mein erstes Blaupause"
        author:
          type: string
          example: "dummer Benny"
        imgUrl:
          type: string
          example: "example.com/exampl.png"
        type:
          $ref: '#/components/schemas/BlueprintType'
    BlueprintWithPartList:
      allOf:
        - $ref: '#/components/schemas/Blueprint'
        - type: object
      properties:
        partlist:
          $ref: '#/components/schemas/PartList'
    NewsBlog:
      type: "object"
      properties:
        id:
          type: string
          example: "j√∂shg5fg3d4f"
        name:
          type: string
          example: "zusammengebaut"
        description:
          type: string
          example: "LEGO News Blog"
        url:
          type: string
          example: "https://zusammengebaut.com/feed"
        language:
          type: string
          example: "de-DE"
    NewsBlogList:
      type: array
      items:
        $ref: '#/components/schemas/NewsBlog'
