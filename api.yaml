openapi: "3.0.0"
info:
  description: "This is the bricky API ."
  version: "1.0.0"
  title: "Bricky Swagger"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "private"
servers:
  - url: https://forstify.de/api/v2
tags:
  - name: "partList"
    description: "Everything about your part lists"
  - name: "blueprint"
    description: "Everything about blueprints, aka Mocs and Sets"
  - name: "newsBlog"
    description: "Everything about newsBlog"
  - name: "user"
    description: "Operations about user"
paths:
  "/partList":
    get:
      tags:
        - "partList"
      summary: "Receive all PartLists of a user"
      description: "Receive all PartLists of a user"
      responses:
        200:
          description: "OK, PartLists successfully returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartListsResponse'
  "/partList/short":
    get:
      tags:
        - "partList"
      summary: "Receive all PartLists of a user only with id and name"
      description: "Receive all PartLists of a user only with id and name"
      responses:
        200:
          description: "OK, PartLists successfully returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartListsShortResponse'
  "/partList/{id}":
    get:
      parameters:
        - in: path
          name: id
          description: Id of the partList
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      tags:
        - "partList"
      summary: "Receive Partlist with given Id"
      description: "Receive Partlist with given Id"
      responses:
        200:
          description: "OK, PartList successfully returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartList'
        404:
          description: "Partlist not found"
    put:
      tags:
        - "partList"
      summary: "Update an existing part list"
      description: "Update an existing part list"
      parameters:
        - in: path
          name: id
          description: Id of the partList
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartList'
      responses:
        200:
          description: "OK, PartList successfully updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartList'
        400:
          description: "At least one of the body valus is invalid"
        404:
          description: "Partlist not found"
    delete:
      tags:
        - "partList"
      summary: "Delete an existing part list"
      description: "Delete an existing part list"
      parameters:
        - in: path
          name: id
          description: Id of the partList
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: "OK, PartList successfully deleted"
        404:
          description: "Partlist not found"
  "/partList/{id}/short":
    get:
      parameters:
        - in: path
          name: id
          description: Id of the partList
          required: true
          schema:
            type: string
      tags:
        - "partList"
      summary: "Receive Partlist with given Id"
      description: "Receive Partlist with given Id"
      responses:
        200:
          description: "OK, PartList successfully returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortPartList'
        404:
          description: "Partlist not found"
  "/partList/{id}/parts":
    get:
      parameters:
        - in: path
          name: id
          description: Id of the partList
          required: true
          schema:
            type: string
      tags:
        - "partList"
      summary: "Receive Parts of the Partlist with given Id"
      description: "Receive Parts of the Partlist with given Id"
      responses:
        200:
          description: "OK, Parts successfully returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Part'
        404:
          description: "Partlist not found"
  /account:
    post:
      tags:
        - "account"
      summary: "Authorize user account"
      description: "Authenticate with Rebrickable"
      requestBody:
        $ref: '#/components/requestBodies/LoginCredentials'
      responses:
        200:
          description: "Ok, JWT Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseToken"
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  requestBodies:
    LoginCredentials:
      description: "Login Credentials"
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginScheme'
          example:
            username: "DÃ¶nermann"
            password: "Kebab"
  schemas:
    LoginScheme:
      type: object
      properties:
        username:
          type: "string"
        password:
          type: "string"
    PartListsResponse:
      type: array
      properties:
        items:
          $ref: '#/components/schemas/PartList'
    PartListsShortResponse:
      type: array
      properties:
        items:
          $ref: '#/components/schemas/ShortPartList'
    Account:
      type: "object"
      properties:
        username:
          type: "string"
    ResponseToken:
      type: "object"
      properties:
        app_token:
          type: "string"
          example: "32okdwkdwkoa2"
    Part:
      type: "object"
      properties:
        partNumber:
          type: "integer"
          format: "int32"
        partId:
          type: "string"
        name:
          type: "string"
        print:
          type: "string"
        category:
          type: "string"
        imgUrl:
          type: "string"
        color:
          type: "string"
      example:
        partNumber: 123
        partId: "1x2 Block"
        name: "1x2 Block"
        print: "blue123"
        category: "Kebab"
        imgUrl: "http://image.de"
        color: "red"
    PartList:
      type: "object"
      properties:
        listId:
          type: "integer"
          format: "int64"
          example: 12
        name:
          type: "string"
          example: "My List"
        blueprint:
          $ref: '#/components/schemas/Blueprint'
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
    ShortPartList:
      type: "object"
      properties:
        listId:
          type: "integer"
          format: "int64"
          example: 12
        name:
          type: "string"
          example: "My List"
        blueprint:
          $ref: '#/components/schemas/Blueprint'
    BlueprintType:
      type: "string"
      enum:
        - MOC
        - SET
    Blueprint:
      type: "object"
      properties:
        blueprintId:
          type: "integer"
          format: "int64"
        theme:
          type: "string"
        name:
          type: "string"
        author:
          type: "string"
        imgUrl:
          type: "string"
        type:
          $ref: '#/components/schemas/BlueprintType'
    NewsBlog:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        url:
          type: "string"
        author:
          type: "string"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"